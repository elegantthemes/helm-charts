apiVersion: pxc.percona.com/v1-5-0
kind: PerconaXtraDBCluster
metadata:
  name: {{ .Values.cluster_name }}
  labels:
    {{ .Values.label_name }}: {{ .Values.label_value }}
    release: {{ .Values.label_value }}
  finalizers:
    - delete-pxc-pods-in-order
#   - delete-proxysql-pvc
#   - delete-pxc-pvc
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"pxc.percona.com/v1-5-0","kind":"PerconaXtraDBCluster"}
spec:
  secretsName: {{ .Values.secrets_name }}
  sslSecretName: {{ .Values.ssl_secrets_name }}
  sslInternalSecretName: {{ .Values.ssl_internal_secrets_name }}
  vaultSecretName: {{ .Values.vault_secrets_name }}
  allowUnsafeConfigurations: false
  #  pause: false
  updateStrategy: SmartUpdate
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com/versions
    apply: recommended
    schedule: "0 4 * * *"
  pxc:
    size: 3
    image: percona/percona-xtradb-cluster:8.0.19-10.1
#    readinessDelaySec: 15
#    livenessDelaySec: 300
#    forceUnsafeBootstrap: false
    configuration: |
      [sst]
      xbstream-opts=--decompress
      [xtrabackup]
      compress=lz4
#    imagePullSecrets:
#      - name: private-registry-credentials
#    priorityClassName: high-priority
#    annotations:
#      iam.amazonaws.com/role: role-arn
#    labels:
#      rack: rack-22
#    containerSecurityContext:
#      privileged: false
#    podSecurityContext:
#      runAsUser: 1001
#      runAsGroup: 1001
#      supplementalGroups: [1001]
#    serviceAccountName: percona-xtradb-cluster-operator-workload
    resources:
      requests:
        memory: 2G
        cpu: 2000m
      limits:
    #   memory: 1G
    #   cpu: "1"
    # nodeSelector:
    #   disktype: ssd
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
    podDisruptionBudget:
      maxUnavailable: 1
    volumeSpec:
      hostPath:
        path: /data
        type: DirectoryOrCreate
      #persistentVolumeClaim:
      #  storageClassName: {{ .Values.storage_class_name }}
      #  accessModes: [ "ReadWriteOnce" ]
      #  resources:
      #    requests:
      #      storage: 6Gi
    gracePeriod: 600
  proxysql:
    enabled: true
    size: 3
    image: percona/percona-xtradb-cluster-operator:1.5.0-proxysql
    labels:
      {{ .Values.label_name }}: {{ .Values.label_value }}
      release: {{ .Values.label_value }}
    resources:
      requests:
        memory: 1G
        cpu: 500m
      limits:
        memory: 1G
        cpu: 2000m
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
    volumeSpec:
      #      emptyDir: {}
      #      hostPath:
      #        path: /data
      #        type: Directory
      persistentVolumeClaim:
        storageClassName: {{ .Values.storage_class_name }}
        resources:
          requests:
            storage: 2Gi
    podDisruptionBudget:
      maxUnavailable: 1
    #      minAvailable: 0
    gracePeriod: 30
  pmm:
    enabled: true
    image: percona/percona-xtradb-cluster-operator:1.5.0-pmm
    serverHost: percona-monitoring-server-service
    serverUser: admin
    resources:
      requests:
        memory: 500M
        cpu: 200m
      limits:
        memory: 750M
        cpu: 500m
  backup:
    image: percona/percona-xtradb-cluster-operator:1.5.0-pxc8.0-backup
    serviceAccountName: percona-xtradb-cluster-operator
    storages:
      #backup-1:
      #  type: filesystem
      #  labels:
      #    {{ .Values.label_name }}: {{ .Values.label_value }}
      #    release: {{ .Values.label_value }}
      #  volume:
      #    persistentVolumeClaim:
      #      storageClassName: {{ .Values.storage_class_name }}
      #      accessModes: [ "ReadWriteOnce" ]
      #      resources:
      #        requests:
      #          storage: 60Gi

      backup-2:
        type: s3
        labels:
          {{ .Values.label_name }}: {{ .Values.label_value }}
          release: {{ .Values.label_value }}
        s3:
          bucket: {{ .Values.s3_bucket_name_backup_2 }}
          credentialsSecret: {{ .Values.s3_secret_name_backup_2 }}
          endpointUrl: {{ .Values.s3_endpoint_backup_2 }}
        region: {{ .Values.s3_region_backup_2 }}

      backup-3:
        type: s3
        labels:
          {{ .Values.label_name }}: {{ .Values.label_value }}
          release: {{ .Values.label_value }}
        s3:
          bucket: {{ .Values.s3_bucket_name_backup_3 }}
          credentialsSecret: {{ .Values.s3_secret_name_backup_3 }}
          endpointUrl: {{ .Values.s3_endpoint_backup_3 }}
        region: {{ .Values.s3_region_backup_3 }}

      backup-4:
        type: s3
        labels:
          {{ .Values.label_name }}: {{ .Values.label_value }}
          release: {{ .Values.label_value }}
        s3:
          bucket: {{ .Values.s3_bucket_name_backup_4 }}
          credentialsSecret: {{ .Values.s3_secret_name_backup_4 }}
          endpointUrl: {{ .Values.s3_endpoint_backup_4 }}
        region: {{ .Values.s3_region_backup_4 }}

    schedule:
      #- name: backup-1
      #  schedule: '0 * * * *'
      #  keep: 6
      #  storageName: backup-1

      - name: backup-2
        schedule: "5 * * * *"
        keep: 12
        storageName: backup-2

      - name: backup-3
        schedule: "10 * * * *"
        keep: 12
        storageName: backup-3

      - name: backup-4
        schedule: "15 * * * *"
        keep: 12
        storageName: backup-4

